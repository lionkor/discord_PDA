{
  "capify": {
    "alias": "capify, aA, Aa",
    "args": "<text>",
    "expl": "Makes text that alternates betweem UPPER and lower case, lIkE sO. Can be used in DMs, too.",
    "exmp": "`capify I'm so smart` => `i'm sO SmArT`"
  },
  "aA": {
    "alias": "capify, aA, Aa",
    "args": "<text>",
    "expl": "Makes text that alternates betweem UPPER and lower case, lIkE sO. Can be used in DMs, too.",
    "exmp": "`capify I'm so smart` => `i'm sO SmArT`"
  },
  "Aa": {
    "alias": "capify, aA, Aa",
    "args": "<text>",
    "expl": "Makes text that alternates betweem UPPER and lower case, lIkE sO. Can be used in DMs, too.",
    "exmp": "`capify I'm so smart` => `i'm sO SmArT`"
  },
  "spoilerize": {
    "alias": "spoilerize, |",
    "args": "<text>",
    "expl": "Puts discord's spoilers around each character of the text, which is really annoying. Copy & paste the output to see the effect!",
    "exmp": "`spoilerize gamer` => `||g||||a||||m||||e||||r||` => \"||g||||a||||m||||e||||r||\""
  },
  "|": {
    "alias": "spoilerize, |",
    "args": "<text>",
    "expl": "Puts discord's spoilers around each character of the text, which is really annoying. Copy & paste the output to see the effect!",
    "exmp": "`spoilerize gamer` => `||g||||a||||m||||e||||r||` => \"||g||||a||||m||||e||||r||\""
  },
  "help": {
    "alias": "help, ?",
    "args": "[command]",
    "expl": "Displays all commands, or help for a specific command. Works in DMs, too!",
    "exmp": "`help c`"
  },
  "?": {
    "alias": "help, ?",
    "args": "[command]",
    "expl": "Displays all commands, or help for a specific command. Works in DMs, too!",
    "exmp": "`help c`"
  },
  "prefix": {
    "alias": "prefix",
    "args": "<new prefix>",
    "expl": "Changes bot's prefix. If it messes up because of other bots with the same prefix, use `++pda_reset_prefix` to reset it to `+`, or ask the Author (Lion#3620) for help.",
    "exmp": "`prefix $$`"
  },
  "thanks": {
    "alias": "thanks",
    "args": "[message]",
    "expl": "Thanks the bot with an optional message. This thank you message will be stored as a (hopefully) happy memory!",
    "exmp": "`thanks mr bot man`"
  },
  "coinflip": {
    "alias": "coinflip",
    "args": " ",
    "expl": "Flips a coin (Heads or Tails). It's random, even if you think it's rigged.",
    "exmp": "`coinflip` => Heads!"
  },
  "rng": {
    "alias": "rng",
    "args": "<min> <max>",
    "expl": "Generates a number between 'min' and 'max', where both should be whole numbers.",
    "exmp": "`rng 5 10` => 7"
  },
  "font": {
    "alias": "font",
    "args": "<fontname> <text>",
    "expl": "Makes pretty text! Fonts that you can use: `nice`, `mono`, `super`, `circle`, `tiny`, `fraktur`",
    "exmp": "`font fraktur OwO` => ùîíùî¥ùîí"
  },
  "calculate": {
    "alias": "calculate, calc, c",
    "args": "<calculation>",
    "expl": "Calculates an expression. This uses a custom algorithm. It supports the following functionalities:\n**‚Üí  ** Common operators: addition (`+`), subtraction (`-`), multiplication (`*`), division (`/`), exponent/power-of (`^`), modulus (`%`)\n**‚Üí  ** Functions: square-root (`sqrt(x)`), sin/cos/tan (`cos(x)`, ...), factorial (`fact(x)`), absolute (`abs(x)`), degrees (`degrees(r)`), radians (`radians(d)`), primality check (`prime(x)`)\n**‚Üí  ** Bitwise operators (only work on integers): bitwise and, or, xor, left-shift, right-shift (`and`, `or`, `xor`, `<<`. `>>`)\n**‚Üí  ** Equality / relational operators (return `1` for `true`, `0` for `false`): equals, not-equals, larger-equals, smaller-equals, larger-than, smaller-than (`==`, `!=`, `>=`, `<=`, `>`, `<`)\n**‚Üí  ** Floating point operands (for example `2.515` / `2,515`)\n**‚Üí  ** Whitespace is ignored, so spaces etc. don't make a difference\n**‚Üí  ** Parentheses, example `1/(9/4)`, and nested parentheses, example `1/((2*4)/4.21)`\n",
    "exmp": "`c (15.8 / (3 / 4)) ^ 2` => `443.8044444444444`"
  },
  "calc": {
    "alias": "calculate, calc, c",
    "args": "<calculation>",
    "expl": "Calculates an expression. This uses a custom algorithm. It supports the following functionalities:\n**‚Üí  ** Common operators: addition (`+`), subtraction (`-`), multiplication (`*`), division (`/`), exponent/power-of (`^`), modulus (`%`)\n**‚Üí  ** Functions: square-root (`sqrt(x)`), sin/cos/tan (`cos(x)`, ...), factorial (`fact(x)`), absolute (`abs(x)`), degrees (`degrees(r)`), radians (`radians(d)`), primality check (`prime(x)`)\n**‚Üí  ** Bitwise operators (only work on integers): bitwise and, or, xor, left-shift, right-shift (`and`, `or`, `xor`, `<<`. `>>`)\n**‚Üí  ** Equality / relational operators (return `1` for `true`, `0` for `false`): equals, not-equals, larger-equals, smaller-equals, larger-than, smaller-than (`==`, `!=`, `>=`, `<=`, `>`, `<`)\n**‚Üí  ** Floating point operands (for example `2.515` / `2,515`)\n**‚Üí  ** Whitespace is ignored, so spaces etc. don't make a difference\n**‚Üí  ** Parentheses, example `1/(9/4)`, and nested parentheses, example `1/((2*4)/4.21)`\n",
    "exmp": "`c (15.8 / (3 / 4)) ^ 2` => `443.8044444444444`"
  },
  "c": {
    "alias": "calculate, calc, c",
    "args": "<calculation>",
    "expl": "Calculates an expression. This uses a custom algorithm. It supports the following functionalities:\n**‚Üí  ** Common operators: addition (`+`), subtraction (`-`), multiplication (`*`), division (`/`), exponent/power-of (`^`), modulus (`%`)\n**‚Üí  ** Functions: square-root (`sqrt(x)`), sin/cos/tan (`cos(x)`, ...), factorial (`fact(x)`), absolute (`abs(x)`), degrees (`degrees(r)`), radians (`radians(d)`), primality check (`prime(x)`)\n**‚Üí  ** Bitwise operators (only work on integers): bitwise and, or, xor, left-shift, right-shift (`and`, `or`, `xor`, `<<`. `>>`)\n**‚Üí  ** Equality / relational operators (return `1` for `true`, `0` for `false`): equals, not-equals, larger-equals, smaller-equals, larger-than, smaller-than (`==`, `!=`, `>=`, `<=`, `>`, `<`)\n**‚Üí  ** Floating point operands (for example `2.515` / `2,515`)\n**‚Üí  ** Whitespace is ignored, so spaces etc. don't make a difference\n**‚Üí  ** Parentheses, example `1/(9/4)`, and nested parentheses, example `1/((2*4)/4.21)`\n",
    "exmp": "`c (15.8 / (3 / 4)) ^ 2` => `443.8044444444444`"
  },
  "hello": {
    "alias": "hello",
    "args": " ",
    "expl": "Displays some information about this bot, like who made it, where its source code can be found (I'm Open-Source (MIT)), and a poll!",
    "exmp": "`hello`"
  },
  "poll": {
    "alias": "poll",
    "args": "<question>",
    "expl": "Posts a poll in the poll channel, with upvote & downvote reactions. Setting the channel is currently a TODO, and it will just create a channel for the polls if none has been configured.",
    "exmp": "`poll Did you like the latest episode of GoT?`"
  },
  "praise": {
    "alias": "praise",
    "args": "<mention>",
    "expl": "Compliments the mentioned user with a randomly generated compliment. Contact my developer if you want to add more compliments (use the `hello` command to find out more)!",
    "exmp": "`praise @PDA` => `@PDA, you have such nice eyes!`"
  },
  "invite": {
    "alias": "invite",
    "args": "",
    "expl": "Shows the invite link needed to invite the bot to your own server.",
    "exmp": "`invite`"
  },
  "enable": {
    "alias": "enable",
    "args": "<command name or alias>",
    "expl": "Enables a command that has been disabled via `disable` or is disabled by default. This command and the `disable` command make it possible for the admins of a server to enable and disable some of PDA's functionalities.",
    "exmp": "`enable c` enables the c command and its aliases (calc and calculate)"
  },
  "disable": {
    "alias": "disable",
    "args": "<command name or alias>",
    "expl": "Disables a command. This command and the `enable` command make it possible for the admins of a server to enable and disable some of PDA's functionalities.",
    "exmp": "`disable c` disables the c command and its aliases (calc and calculate)"
  }
}

